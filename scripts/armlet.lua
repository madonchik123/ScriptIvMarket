local script={};script.ui={};local main_group=Menu.Create("Miscellaneous","In Game","Armlet Abuse");if main_group then local group=main_group:Create("Main"):Create("Armlet Abuse");script.ui.enable=group:Switch("Включить фикс для абуза армлета",true);script.ui.enable:Icon("\u{1F6E1}");armlet=Menu.Find("Miscellaneous","In Game","Armlet Abuse","Main","Armlet Abuse","Enable")end;local my_hero=nil;local active_threats={};local DAMAGE_KEYS={"damage","bonus_damage","dot_damage","dps","damage_per_second","base_damage","min_damage","max_damage","nuke_damage","burn_damage","attack_damage","bonus_magic_damage","bonus_damage_magic"};local DAMAGE_SUFFIXES={"_damage","_base_damage"};local RADIUS_KEYS={"radius","area_of_effect","aoe","cast_range"};local ABILITY_FIX_MAP={["zuus_lightning_hands"]="zuus_thundergods_wrath"};local function DoesAbilityHaveDamage(ability,caster)if not ability or not caster then return false,nil end;if Ability.GetDamage(ability)>0 then return true,"Ability.GetDamage()"end;for _,key in ipairs(DAMAGE_KEYS)do local value=Ability.GetLevelSpecialValueFor(ability,key);if value and value>0 then return true,key end end;local ability_name=Ability.GetName(ability);local short_hero_name=string.match(NPC.GetUnitName(caster),"npc_dota_hero_([%w_]+)");local clean_ability_name=ability_name;if short_hero_name then clean_ability_name=string.gsub(ability_name,"^"..short_hero_name.."_","")end;local potential_bases={};table.insert(potential_bases,clean_ability_name);local first_word=string.match(clean_ability_name,"^[^_]+");if first_word and first_word~=clean_ability_name then table.insert(potential_bases,first_word)end;for _,base in ipairs(potential_bases)do for _,suffix in ipairs(DAMAGE_SUFFIXES)do local potential_key=base..suffix;local value=Ability.GetLevelSpecialValueFor(ability,potential_key);if value and value>0 then return true,potential_key end end end;return false,nil end;local function GetAbilityRadius(ability)if not ability then return nil end;for _,key in ipairs(RADIUS_KEYS)do local value=Ability.GetLevelSpecialValueFor(ability,key);if value and value>0 then return value end end;return nil end;function script.OnProjectile(data)if not script.ui.enable or not script.ui.enable:Get()or not my_hero then return end;if data.target==my_hero and data.source and not Entity.IsSameTeam(data.source,my_hero)and not data.isAttack and data.ability then if data.moveSpeed>0 then local threat_id=Ability.GetName(data.ability).."_"..data.handle;local distance=(Entity.GetAbsOrigin(data.source)-Entity.GetAbsOrigin(my_hero)):Length2D();local time_to_impact=distance/data.moveSpeed;active_threats[threat_id]={type="projectile",ability_name=Ability.GetName(data.ability),expiration_time=GlobalVars.GetCurTime()+time_to_impact,source_pos=Entity.GetAbsOrigin(data.source),speed=data.moveSpeed,launch_time=GlobalVars.GetCurTime()}end end end;function script.OnUnitAnimation(anim)if not script.ui.enable or not script.ui.enable:Get()or not my_hero then return end;if not anim.unit or Entity.IsSameTeam(anim.unit,my_hero)or not Entity.IsHero(anim.unit)then return end;local ability=NPC.GetAbilityByActivity(anim.unit,anim.activity);if not ability then return end;local ability_name=Ability.GetName(ability);local fixed_ability_name=ABILITY_FIX_MAP[ability_name];if fixed_ability_name then ability=NPC.GetAbility(anim.unit,fixed_ability_name);if not ability then return end;ability_name=Ability.GetName(ability)end;local behavior=Ability.GetBehavior(ability);local is_unit_target_spell=(behavior & Enum.AbilityBehavior.DOTA_ABILITY_BEHAVIOR_UNIT_TARGET)~=0;local is_no_target_spell=(behavior & Enum.AbilityBehavior.DOTA_ABILITY_BEHAVIOR_NO_TARGET)~=0;local is_point_spell=(behavior & Enum.AbilityBehavior.DOTA_ABILITY_BEHAVIOR_POINT)~=0;local is_considered_threat=false;if is_unit_target_spell then if Entity.GetAbsOrigin(my_hero):Distance(Entity.GetAbsOrigin(anim.unit))<Ability.GetCastRange(ability)+100 then is_considered_threat=true end elseif is_no_target_spell then local ability_radius=GetAbilityRadius(ability);if ability_radius then if Entity.GetAbsOrigin(my_hero):Distance(Entity.GetAbsOrigin(anim.unit))<ability_radius+30 then is_considered_threat=true end else is_considered_threat=true end elseif is_point_spell then return end;if not is_considered_threat then return end;if Ability.GetLevelSpecialValueFor(ability,"projectile_speed")>0 then return end;local has_damage,_=DoesAbilityHaveDamage(ability,anim.unit);if has_damage then local threat_id=ability_name.."_animation_"..GlobalVars.GetFrameCount();active_threats[threat_id]={type="animation",ability_name=ability_name,expiration_time=GlobalVars.GetCurTime()+1.5}end end;function script.OnEntityHurt(event)if not script.ui.enable or not script.ui.enable:Get()or not my_hero then return end;if event.target~=my_hero or not event.ability then return end;local ability_name=Ability.GetName(event.ability);if not ability_name then return end;local threat_to_remove_id=nil;local earliest_impact_time=-1;for id,threat_data in pairs(active_threats)do if threat_data.ability_name==ability_name then if earliest_impact_time==-1 or threat_data.expiration_time<earliest_impact_time then earliest_impact_time=threat_data.expiration_time;threat_to_remove_id=id end end end;if threat_to_remove_id then active_threats[threat_to_remove_id]=nil end end;function script.OnUpdate()if not Engine.IsInGame()then if my_hero then my_hero=nil end;if next(active_threats)then active_threats={}end;return end;if not(script.ui.enable and script.ui.enable:Get())then return end;if not my_hero then my_hero=Heroes.GetLocal()end;if not my_hero or not Entity.IsAlive(my_hero)then if next(active_threats)then active_threats={}end;return end;local danger=false;local current_time=GlobalVars.GetCurTime();for id,threat_data in pairs(active_threats)do if current_time>threat_data.expiration_time then active_threats[id]=nil;goto continue end;if threat_data.type=="projectile"then if threat_data.expiration_time-current_time<0.2 then danger=true;break end elseif threat_data.type=="animation"then danger=true;break end;::continue:: end;if armlet then if danger then if armlet:Get()then armlet:Set(false)end else if not armlet:Get()then armlet:Set(true)end end else armlet=Menu.Find("Miscellaneous","In Game","Armlet Abuse","Main","Armlet Abuse","Enable")end end;function script.OnGameEnd()my_hero,active_threats,armlet=nil,{},nil end;return script
