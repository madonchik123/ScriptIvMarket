local a,d,e,f,g,h,i,j,k,l={ui={}},nil,nil,{},{"damage","bonus_damage","dot_damage","dps","total_damage","damage_per_second","base_damage","min_damage","max_damage","nuke_damage","burn_damage","attack_damage","bonus_magic_damage","bonus_damage_magic"},{"_damage","_base_damage"},{"radius","area_of_effect","aoe","cast_range"},{["zuus_lightning_hands"]="zuus_thundergods_wrath"};local b=Menu.Create("Miscellaneous","In Game","Armlet Abuse");if b then local c=b:Create("Main"):Create("Armlet Abuse");a.ui.enable=c:Switch("Включить фикс для абуза армлета",true);a.ui.enable:Icon("\u{1F6E1}");d=Menu.Find("Miscellaneous","In Game","Armlet Abuse","Main","Armlet Abuse","Enable")end;k=function(p1,q1)if Ability.GetDamage(p1)>0 then return true end;for _,r1 in ipairs(g)do local s1=Ability.GetLevelSpecialValueFor(p1,r1);if s1 and s1>0 then return true end end;local s=Ability.GetName(p1);local t1=string.match(NPC.GetUnitName(q1),"npc_dota_hero_([%w_]+)");local u1=s;if t1 then u1=string.gsub(s,"^"..t1.."_","")end;local v1={};table.insert(v1,u1);local w1=string.match(u1,"^[^_]+");if w1 and w1~=u1 then table.insert(v1,w1)end;for _,x1 in ipairs(v1)do for _,y1 in ipairs(h)do local z1=x1..y1;local s1=Ability.GetLevelSpecialValueFor(p1,z1);if s1 and s1>0 then return true end end end;return false end;l=function(a2)for _,b2 in ipairs(i)do local c2=Ability.GetLevelSpecialValueFor(a2,b2);if c2 and c2>0 then return c2 end end;return nil end;a.OnProjectile=function(m)if not a.ui.enable or not a.ui.enable:Get()or not e then return end;if m.target==e and m.source and not Entity.IsSameTeam(m.source,e)and not m.isAttack and m.ability and m.moveSpeed>0 then local n=Ability.GetName(m.ability).."_"..m.handle;local o=(Entity.GetAbsOrigin(m.source)-Entity.GetAbsOrigin(e)):Length2D();local p=o/m.moveSpeed;f[n]={type="projectile",expiration_time=GlobalVars.GetCurTime()+p+0.5,source_pos=Entity.GetAbsOrigin(m.source),speed=m.moveSpeed,launch_time=GlobalVars.GetCurTime(),ability_name=Ability.GetName(m.ability)}end end;a.OnUnitAnimation=function(q)if not a.ui.enable or not a.ui.enable:Get()or not e then return end;if not q.unit or Entity.IsSameTeam(q.unit,e)or not Entity.IsHero(q.unit)then return end;local r=NPC.GetAbilityByActivity(q.unit,q.activity);if not r then return end;local s=Ability.GetName(r);local t=j[s];if t then r=NPC.GetAbility(q.unit,t);if not r then return end end;local u=Ability.GetBehavior(r);local v=(u&Enum.AbilityBehavior.DOTA_ABILITY_BEHAVIOR_UNIT_TARGET)~=0;local w=(u&Enum.AbilityBehavior.DOTA_ABILITY_BEHAVIOR_POINT)~=0;local x=(u&Enum.AbilityBehavior.DOTA_ABILITY_BEHAVIOR_NO_TARGET)~=0;local y=false;if v then if Entity.GetAbsOrigin(e):Distance(Entity.GetAbsOrigin(q.unit))<Ability.GetCastRange(r)+100 then y=true end elseif x then local z=l(r);if z then if Entity.GetAbsOrigin(e):Distance(Entity.GetAbsOrigin(q.unit))<z+30 then y=true end else y=true end elseif w then return end;if not y then return end;if Ability.GetLevelSpecialValueFor(r,"projectile_speed")>0 then return end;local a1=k(r,q.unit);if a1 then local c1=Ability.GetName(r).."_animation";f[c1]={type="animation",expiration_time=GlobalVars.GetCurTime()+1.5}end end;a.OnEntityHurt=function(d1)if not a.ui.enable or not a.ui.enable:Get()then return end;if d1.target~=e or not d1.ability then return end;local e1=Ability.GetName(d1.ability);for f1,_ in pairs(f)do if string.find(f1,e1)then f[f1]=nil end end end;a.OnUpdate=function()if not Engine.IsInGame()then return end;if not(a.ui.enable and a.ui.enable:Get())then return end;if not e then e=Heroes.GetLocal()end;if not e or not Entity.IsAlive(e)then if next(f)then f={}end;return end;local g1=false;local h1=GlobalVars.GetCurTime();for i1,j1 in pairs(f)do if h1>j1.expiration_time then f[i1]=nil;goto continue end;if j1.type=="projectile"then local k1=Entity.GetAbsOrigin(e);local l1=h1-j1.launch_time;local m1=(k1-j1.source_pos):Normalized();local n1=j1.source_pos+m1*j1.speed*l1;local o1=200+j1.speed*0.2;if(k1-n1):Length2D()<o1 then g1=true;break end elseif j1.type=="animation"then g1=true;break end;::continue::end;if d then if g1 then if d:Get()then d:Set(false)end else if not d:Get()then d:Set(true)end end else d=Menu.Find("Miscellaneous","In Game","Armlet Abuse","Main","Armlet Abuse","Enable")end end;a.OnGameEnd=function()e,f,d=nil,{},nil end;return a