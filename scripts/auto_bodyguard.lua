local script = {};script.ui = {};script.state = {};do local tab = Menu.Create("Heroes", "Hero List", "Marci") local group = tab:Create("Main Settings"):Create("Sidekick & Bodyguard") script.ui.enable_fix = group:Switch("Фикс авто bodyguard", true, "panorama/images/heroes/icons/npc_dota_hero_marci_png.vtex_c") end;local function reset_state() script.state = { my_hero = nil, target_switch = nil, sidekick_ability = nil, next_check_time = 0 } end;local function check_and_enable_switch() local target_switch = script.state.target_switch local sidekick = script.state.sidekick_ability if not target_switch or not sidekick then return end local my_hero = script.state.my_hero target_switch:Set(false) local cast_range = Ability.GetCastRange(sidekick) if cast_range <= 0 then return end local my_pos = Entity.GetAbsOrigin(my_hero) for _, ally in ipairs(Heroes.GetAll()) do if ally ~= my_hero and Entity.IsAlive(ally) and not NPC.IsIllusion(ally) and Entity.IsSameTeam(my_hero, ally) and my_pos:Distance(Entity.GetAbsOrigin(ally)) < cast_range then if NPC.IsAttacking(ally) then local enemies = Entity.GetHeroesInRadius(ally, NPC.GetAttackRange(ally) + 100, Enum.TeamType.TEAM_ENEMY) if #enemies > 0 then target_switch:Set(true) script.state.next_check_time = GlobalVars.GetCurTime() + 0.5 return end end end end end;function script.OnUpdate() if not script.ui.enable_fix:Get() then return end if not Engine.IsInGame() then if script.state.my_hero then reset_state() end return end if not script.state.my_hero then script.state.my_hero = Heroes.GetLocal() if not script.state.my_hero then return end end if not Entity.IsAlive(script.state.my_hero) or NPC.GetUnitName(script.state.my_hero) ~= "npc_dota_hero_marci
